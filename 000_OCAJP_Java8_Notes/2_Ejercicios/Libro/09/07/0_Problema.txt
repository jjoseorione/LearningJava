1. Estás desarrollando una aplicación que permite a un usuario comparar automóviles. Utilizar clases abstractas, clases e interfaces para modelar las entidades Coche, Camion, Vehiculo y Conducible. Declarar y definir un método llamado conducir() en los lugares apropiados.

2. Cada vehículo debe tener marca y modelo. ¿Qué se puede hacer para estar seguro de que el método getMakeAndModel pueda ser invocado en cada vehículo?

	R: Heredarlo desde la clase padre

3. Se necesita obetener la identificación de un vehículo llamando al método getVIN() en cualquier vehículo. Además, se requiere que ninguna subclase pueda cambiar el método getVIN ¿cómo se debe realizar este método?

	R: En la clase padre de todos los vehículos y marcado como final.

4. Crear una interfaz llamada Conducible con un método default start(). Invocar start en instancias de clases que implementen Conducible. Sobreescribir start() de tal forma que imprima un mensaje diferente en cada clase.

5. Asegurarse de que cada vehículo sea creado con un VIN

	R: Se crea el constructor en la clase Vehiculo, de tal forma que no exista un constructor no-args default. Luego, en los constructores de las clases concretas realizamos una llamada al constructor de Vehiculo.

6. Crear una clase llamada ToyCar que extienda a Coche, pero no requiera ningún argumento para creación de instancia.

	R: Se agrega explícitamente un constructor no-args a ToyCar que invoque el constructor de Vehiculo enviando un parámetro default. De esta manera, el constructor de ToyCar no solicita ningún parámetro.

7. Se tiene un conjunto de características tales como alto, ancho, largo, potencia y capacidad de carga, sobre las cuales se requiere comparar cualquier par de vehículos. Los nombres de las nuevas características serán añadidas a esta lista en el futuro. Crear un método getFeature(String featureName) tal que retorne "N.A." para cualquier característica no soportada por un vehículo en particular.

	R: Se agrega un método abstracto que se implementa en cada clase concreta. Dentro de la clase concreta, se utiliza un switch para seleccionar qué características son soportadas y cuáles no.