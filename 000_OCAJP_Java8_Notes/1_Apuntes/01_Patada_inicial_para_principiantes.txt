1.1 Puntos clave de POO

	1.1.1 Una cuestión de perspectiva

		En los Estados Unidos, al igual que en otros países desarrollados, las cosas están extremadaente bien definidas. Los productos especifican claramente cómo deben de ser usados y en qué casos pueden fallar. Las personas pueden confiar en estas especificaciones porque las cosas funcionan como se espera y fallan en la forma que deben hacerlo. Además , siempre se espera que dichos artículos tengan especificaciones detalladas.

		En pocas palabras, la gente sabe exactamente qué están obteniendo cuando adquieren algo. Esto es como si la misma sociedad fuera "orientada a objetos".

		La ORIENTACIÓN A OBJETOS es sólo un nombre para la misma forma y sentido en la que las cosas simplemente embonan en el mundo real. Una porción de código no es muy diferente a objetos físicos como tornillos, tuercas, clavijas, contactos, etc. Si escribes un fragmento de código basado en una especificación, éste debe encajar tan bien como una tuerca en un tornillo de la misma medida sin importar quién manufacturó cada uno. La fuente del concepto de POO es el mundo real. Para comprender POO de forma cabal, debes de empezar a pensar en tu fragmento de código como si fuera un componente físico, el cual tiene un comportamiento bien definido y que puede ser reemplazado por otro componente que se adhiera al mismo comportamiento.

	1.1.2 API

		Probablemente has escuchado que API significa Application Programming Interface, pero ¿realmente entiendes qué significa? A este concepto puede también aplicarse la analogía de relacionar conceptos de programación con conceptos de la vida real. Cuando utilizas un apagador, no te preocupas qué hay dentro del apagador o cómo funciona, sólo te preocupas por conectarlo y utilizarlo como debe ser utilizado. De igual manera, un automovil provee controles que permiten conducirlo y utilizar todas sus características; estos controles son todo lo que necesitas conocer para operar correctamente el automovil.

		Con los componentes de software ocurre la misma situación. Un componente de software no tiene por qué se un montón de clases y paquetes encapsulados dentro de un archivo jar, sino que puede ser tan pequeño como una sola clase con un solo método. Pero sin importar lo simple que sea un fragmento de código, debes pensar en cómo esperas que los demás lo utilicen. Debes pensar en diferentes maneras en las que los usuarios puedan usar el componente. También debes pensar cómo el componente debe comportarse en caso de que el componente no sea utilizado en la forma en la que se espere que se utilice. En otras palabras, debes de especificar una interfaz para tu componente, incluso antes de empezar a programarlo, donde interfaz no se refiere al concepto de interfaz de Java, sino a una especificación de cómo interactuar con tu componente. En un automóvil, los controles como el volante, los pedales, la palanca, etcetera, son su interfaz. En un componente de software, la especificación de las clases públicas, métodos, campos, enums, etcétera, es su interfaz. Como desarrollador de aplicaciones,, si quieres usar un componente desarrollado por alguien más, sólo debes de preocuparte por la interfaz de dicho componente.

		En el mundo de Java, una colección de clases provistas por un un tercero para un propósito en particulares llamada "biblioteca" y la JavaDoc para esas clases, describe su API. Cuando instalas el JRE, éste incluye un gran número de clases y paquetes, las cuáles son comunmente llamadas biblioteca estándar de Java, y la colección de sus clases públicas e interfaces es conocida como la API de Java.

		[A partir de aquí se acaba la traducción directa y sólo escribimos conceptos clave muy necesarios de recordar. En su mayoría leeremos]

	1.1.3 Tipo, clase, enum e interfaz

		Una clase describe comportamiento y la implementación de dicho comportamiento. Por ejemplo, una cuenta de banco, donde el comportamiento sería depositar o retirar dinero y la definición sería la forma en que esto se realiza

		Un enum (corto para enumeración) también permite combinar descripción e implementación del comportamiento, con la dierencia de que limita a un número fijo de instancias. Por ejemplo, existen sólo 7 días de la semana y no sería correcto que se agregue una nueva instancia a dicha definición.

		Una interfaz permite definir sólo la descripción del comportamiento sin la implementación del mismo. Por ejemplo, un "movible" puede ser una interfaz qe describa algo que se mueve. Un movible puede ser una vaca, un atomóvil o incluso el precio de una acción en el mercao de valores. Todas estas cosas se mueven, pero cada una de manera muy distinta. El punto clave con la interfaz es que no se puede instanciar, ya que no se puede tener una instancia de "movible". Por lo tanto, una interffaz es siempre abstracta ya que no existe en sí misma, sino que debe implementarse el comportamiento de la interfaz.

		Adicionalmente existen clases abstractas, la cual es un punto medio entre una interfaz y una clase, ya que define tanto comportamiento como implementación del mismo, pero dicha implementación es aún incompleta, por lo que debe completarse antes de crear instancias ya que de igual forma no puede implementarse por sí misma.

1.2 Por qué esto es así

	I. Para dividir en componentes
	II. Para eliminar el alcance de bugs
	III. Hacer la vida fácil al programador
	IV. Para ser comercialmente exitoso

1.3 Declaración y Definición.

	Una declaración provee información parcial. La definición completa esa información parcial.

1.4 Objetos y Referencias

	Una clase es una plantilla con la que los objetos son creados. Para acceder a un objeto, se requiere tener al menos una referencia al mismo. Se pueden tener tantas referencias como se desee y todas son igual de válidas y útiles. Se puede perder una referencia, pero mientras se siga manteniendo al menos una referencia a un objeto, el objeto sigue existiendo.

	Las variables de referencia no contienen al objeto en sí, sino la dirección de memoria en la que se encuentra. En Java no es posible asignar directamente a una variable de referencia el valor que queremos que contenga. Únicamente se puede igualar una referencia a otra para que apunten al mismo objeto. Cuando una variable de referencia ya no apunta a ningún objeto, ésta contiene null. Una variable primitiva no puede contener null.

1.5 Estático e instancia

	Los campos y métodos estáticos son aquellos que pertenecen directamente a la clase y no a instancias (objetos), por lo que se invocan referenciando la clase. A pesar de ello, también es posible acceder a campos y métodos estáticos usando la referencia al objeto, pero no se recomienda y se debe tener claro que el campo o el método no está ligado a ningún objeto, sino a la clase.

1.6 Stack (pila) y Heap (Montón)
	En Java se necesitan dos tipos de memoria asignada: Una memoria temporal que pueda ser limpiada tan pronto como un método finaliza su llamada y otra para cosas permanentes que se mantengan por más tiempo que la llamada de un método. El espacio para cosas temporales se llama Stack o Pila, mientras que la memoria para el resto de cosas es llamado Heap o Montón.

	En Java, cada hilo tiene su propia porción fija de Pila. La Pila debe su nombre a que es como una Pila (por ejemplo, un tubo de papas fritas) en donde se ven agrupando las variables una encima de otra (de abajo hacia arriba) y van desapareciendo conforme dejan de ser necesarias (de arriba hacia abajo). Cuando un hilo muere, toda la pila de ese hilo es liberada.

	El montón es como un montón, ya que los objetos caen en la forma en que se acomoden solas (aleatoria). La JVM organiza el montón, lo cual es un tema que se estudia cuando se quieren optimizar aplicaciones.

	Cuando se crea un objeto en cuaquier parte del código (ya sea en un método o en una clase), la JVM reserva espacio para el objeto en el montón y pone su contenido en ese espacio. En Java, un prgrama nunca libera este espacio de manera explícita, sino que es manejado por la JVM. Para que un método acceda a un objeto, éste debe usar su referencia que apunte a dicho objeto. Si no existe ninguna referencia en ninguna pila a través de la cual un objeto pueda ser accedido, dicho objeto se considera basura y será limpiado automáticamente por el recolector de basura de la JVM.

	Los objetos residen siempre en el Heap, mientras que sus variables de referencia pueden residir en el Heap o en el Stack, dependiendo de en qupe parte del código fueron creados.

	Puntos importantes:
		- Las variables locales siempre se guardan en el Stack. Los objetos siempre se guardan en el Heap
		- La JVM puede tener muchos hilos. Cada hilo tiene una cantidad fija de stack asignada que es exclusiva para ese hilo. Nadie más que ese hilo puede acceder a su porción asignada de stack.
		- El montón es compartido entre todos los hilos. Cada hilo puede usar espacio en el montón al crear objetos. Debido a que el montón es compartido, es posible para algún hilo acceder a objetos creados pos por otro, siempre que tenga una referencia al mismo.
		- En términos prácticos, el Stack está limitado a 64KB, mientras que el del Heap es ilimitado.
		- Sólo las variables temporales (es decir, las que son creadas dentro de métodos) son creadas dentro del stack. Todo lo demás se crea dentro del heap.
		- Cuando un método es invocado por un hilo, se usa el stack de ese hilo para mantener las variables temporales del método.
		- Las variables añadidas al stack por un método, son removidas del stack en cuanto el método finaliza. Todo lo demás creado por un método, se mantiene en el montón incluso al finalizar el método.

1.7 Convenciones

	1.7.1 ¿Qué es una convención?

		Una convención es un acuerdo implícito dentro de una comunidad. No tiene el peso de una regla, ya que no hay nada malo con no cumplirla, pero se acostumbra hacerlo. En el mundo de la programación, por ejemplo, se acostubra nombrar como i, j, o k a las variables utilizadas en ciclos. No hay nada de malo con ponerle i como nombre a una variable que guarde algo más trascendente que una variable de ciclo, pero eso hará el código menos entendible.

	1.7.2 Concenciones en Java

		Algunas de las más importantes son:

			1. Camel Case: Palabras juntas (sin guiones o guiones bajos) e iniciando cada palabra con mayúscula.

				a) Las clases inician siempre con mayúscula. Por ejemplo: RadOnlyArrayFisty

				b) Los paquetes inician con minúscula. Por ejemplo: dataStructures.

				c) Las variables empiezan con minúscula y pueden tener guines bajos. Por ejemplo: current_account.

			2. Nombres. Los nombres deben ser significativos y descriptivos.

			3. Nombres de los paquetes. Utilizan una combinación de un dominio inverso con un grupo y/o el nombre de la aplicación. Por ejemplo, para la empresa Bank Of America, en la división de Fixen Income Technologies que desarrolla la aplicación FX Blotter, todos los paquetes de esa aplicación deben empezar con com.bofa.fit.fxblotter. El nobre completo para una clase llamada ReadOnlyFirst podría ser com.bofa.fit.fxblotter.dataStructures.ReadOnlyArrayList. La razón por la que se utiliza el dominio inverso es porque hace fácil crear nombres de paquetes que sean únicos a nivel mundial. Por ejemplo, si un desarrollador de otra área está creando su propia clase ReadOnlyArrayList, el nombre completo de esa clase puede ser com.bofa.derivatives.dataStructures.ReadOnlyArrayList. No habría problema si un desarrollador quiere usar ambas clases al mismo tiempo en su código al mismo tiempo, ya que los nombres son diferentes. Ambos programadores pusieron nombres diferentes a sus paquetes sin siquiera hberse comunicado y a la vez ambos paquetes son únicos a nivel global porque el dominio de la compañía es único a nivel global.

1.8 Compilación y Ejecución

	1.8.1 Compilación y Ejecución

		El nombre de una clase, precedido por el nombre del paquete en el que se encuentra se conoce como nombre completo calificado de la clase (FQCN). 

		El uso de paquetes es por organización del código, pero al compilador y a la JVM no le interesa cómo acomodamos los paquetes.

		El comando java espera que el archivo .class se encuentre en una ruta como la que describe el nombre completo calificado. La clase accounting.Account debería encontrarse en accounting/Account.class.

		El comando javac permite la opción -d, la cual crea en automático el esquema de carpetas que describa el nombre del paquete de una clase. Por ejemplo: $java C:/MyClasses Account.java creará el esquema de carpetas necesario para la clase Account dentro de la carpeta C:/MyClasses

		El comando java permite la opción -classpath, el cual nos deja ingresar la ruta de la clase a ejecutar. Si la clase llama a otras clases, se deben especificar también sus rutas separados por ;. Ejemplo: $java -classpath c:/myclassfiles;c:/newclasses accounting.Account. Se especifica la ruta donde se encuentra la estructura de clases y paquetes, no donde se encuentra la clase especificamente.

		Cuando una clase es dependiente de otra, debe compilarse primero la clase independiente y después la dependiente. Esto es impráctico ya que obliga a que rastreemos manualmente las dependencias entre clases y en caso de que dos clases dependan una de la otra, imposibilita la compilación, por lo que es mejor compilar ambas clases juntas. Por ejemplo: javac -d . A.java B.java compila las clases A y B ambas en el directorio . y crea la estructura de directorios necesaria. También es impractico especificar todos los archivos a compilar, por lo que sería mejor el comando javac -d . *.java para compilar todos los archivos del directorio. Todas las dependencias se resolveran por el compilador

	1.8.2 Empaquetamiento en archivo .jar

		Un archivo jar (Java Archive) es un comprimido de archivos java que normalmente es usado para comprimir una aplicación completa y evitar tener múltiples archivos. Para ello se utiliza el comando jar.

		Además de guardar los archivos .class. el jar permite guardar información acerca del contenido del jar dentro de sí mismo. Esta información se guarda en un archivo especial llamado MANIFEST.MF y se guarda dentro de la carpeta META-INF.

	1.8.3 Error de compilación vs excepción en tiempo de ejecución

		El compilador revisa reglas sintácticas únicamente y no errores lógicos, ya que no ejecuta ningún código. Sin embargo, si encuentra algo que le parezca lógicamente incorrecto, tendrá un error.

		La JVM sí ejecuta código y es la que encontrará excepciones cuando exista un error ent tiempo de ejecución.

1.9 Nomenclatura (coloquial)

	I. Clase: Puede referirse a clase, interfaz o enum.

	II. Tipo: Puede referirse a clases, interfaces, enums y también a tipos primitivos (byte, char, short, int, float, double y boolean).

	III. Tipos primitivos: byte, cjar, short, int, long, float, double y boolean. Son llamados primitivos porque sólo contienen datos y no comportamiento.

	IV. Tipos referenciados: Clases, interfaces y enums. Son referenciados porque siempre son llamados a través de referencias y nunca directamente. Contienen datos y también comportamiento.

	V. Tipos referenciados de alto nivel: Clases, interfaces o enums que sean definidos directamente dentro de un paquete.

	VI. Tipos referenciados anidados: Clases, interfaces y enums que sean definidos dentro de otras clases, interfaces o enums.

	VII. Tipos referenciados internos: Clases, interfaces y enums anidados no estáticos

	VIII. Tipos referenciados locales: Tipos referenciados que son definidos dentro de un método (o dentro de algún otro bloque de código, pero no directamente dentro de una clase, interfaz o enum).

	IX. Clases anónimas: Es un caso especial de una clase anidada, en la que sólo la definición de la clase está presente en el código y la declaración completa está inferida automáticamente por el compilador por el contexto. Una clase anónima es siempre anidada y nunca estática.

	X. Tiempo de compilación vs tiempo de ejecución: Todo lo que ocurra cuando se compula el código, se dice que ocurre en tiempo de compilación. Todo lo que ocurra cuando el programa ya se está ejecutando, se dice que ocurre en tiempo de ejecución

	XI. Constantes en tiempo de compilación: variables definidas como "final" así como valores en duro como números (1, 2, 3, etc.), caracteres ('a', 'b') o booleanos (true, false, etc.).

1.10 Identificadores

	Un identificador puede ser una secuencia ilimitada de letras y digitos (se inicia siempre con letra). Un identificador no puede llamarse como una palabra reservada (int, class, extends) o literal (true, false, null). Las letras admitidas por Java son las letras de la A a la Z en mayúscula y minúscula, además del guión bajo y el signo de pesos.