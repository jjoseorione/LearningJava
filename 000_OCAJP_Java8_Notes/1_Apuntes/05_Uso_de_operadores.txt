5.1 Operadores Java
	
	Los operadores en Java son una parte fundamental del código, pues difícilmente se puede esribir una sentencia sin utilizar operadores. Tareas simples como crear objetos o llamar al método de un objeto utilizan operadores (operador new y operador punto).

	5.1.1 Descripción general de operadores disponibles en Java

		Java tiene un gran número de operadores, los cuales pueden clasificarse con base en el tipo de operaciones que realizan (aritméticas, relacionales, lógicas, bit a bit, asignación, otros); basado en el número de operandos que reciben (unarios, binarios, ternarios); o basados en el tipo de operandos que reciben (primitivos, incluyendo wrappers u objetos).

			Operadores aritméticos:

				+, -, *, / (Binario)
					Suma, resta, multiplicación y división

				% (Binario)
					Operador módulo. Devuelve el residuo de una división.

				- (Unario)
					Menos unario. Devuelve el valor negado (o negativo) de una variable sin cambiar el valor de la variable original

				++, -- (Unario)
					Incremento y decremento unario. Incrementa o decrementa en 1 el valor de una variable. El incremento o decremento puede realizarse en pre o en post (antes o después de ser utilizado el valor).

			Operadores relacionales

				<, >, <=, >= (Binario)
					Menor que, mayor que, menor o igual que, mayor o igual que. Sólo funcionan con tipos numéricos.

				==, != (Binario)
					Igual que y diferente que. Estos operadores funcionan en valores primitivos, y en tipos referenciados. Entre tipos primitivos y entre un primitivo y un wrapper, se compara si los valores son los mismos. Entre variables referenciadas, se compara si la referencia es al mismo objeto.

			Operadores lógicos

				&&, || (Binario)
					Corto circuito AND y OR. Ambas retornan un valor booleano. Comparan dos valores booleanos. Son llamados "corto circuito" debido a que evitan evaluaciones innecesarias. La operación OR se detendrá en cuanto detecte un valor true, mientras que la operación AND se detendrá en cuanto detecte un valor false.

				&, | (Binario)
					AND y OR bit a bit. No aplican corto circuito, por lo que son útiles para realizar operaciones lógicas en las que ambas partes deben evaluarse.

				^ (Binario)
					XOR, también conocido como OR exclusivo. Es un operador bit a bit. Devuelve true si exactamente uno de los operandos es true. También puede verse como que devuelve true si los dos valores son diferentes o false si ambos son iguales.

				! (Unario)
					Negación. Niega una variable booleana.

				?: (Ternario)
					Operador ternario. Es una versión resumida de un if/else para asignar valor a una variable.

			Operadores de asignación

				= (Binario)
					Asignación simple. Se copia al primer operando el valor de la segunda. Es importante recordar que para tipos referenciados se copia el valor de la referencia. Es importante saber que el operador de asignación tiene asociatividad de derecha a izquierda. Lo que significa que a = b = c = d = 100; será lo mismo que escribir d = 100; c = d; b = c; a = b;

				*=, /*, %=, +=, -=, <<=, >>=, >>>=, &=, |= (Binario)
					Asignaciones compuestas. Son llamadas de esta manera porque realizan dos acciones a la vez. Realizan una operación (aritmética o bit a bit) y posteriormente asignan el resultado de la operación al operando del lado izquierdo. Estos operadores sirven sólo en operados numéricos. La única excepción es +=, el cual sirve también con Strings para concatenar.

			Operadores bit a bit (No requerido para el examen)

				&, |, ^ (Binario)
					AND, OR y XOR bit a bit.

				~ (Unario)
					Complemento bit a bit. Intercambia los bits 1 por 0 y los 0 por 1.

				>>, << (Binario)
					Corrimiento signado de bits a la derecha y a la izquierda. Recorre al primer operando el número de bits a la derecha o a la izquierda el número de posiciones que indique el segundo operando. Es signado debido a que mantiene el mismo bit de signo después de la operación.

				>>> (Binario)
					Corrimiento no signado de bits a la izquierda. Funciona de la misma manera que >>, pero no conserva el bit de signo, sino que inserta ceros por el lado izquierdo hacia el lado derecho.

			Otros operadores

				+ (Binario)
					Concatenación de Strings. El operador + concatena dos variables para formar una nueva String.

				. (punto)
					El operador punto sirve para invocar métodos o campos desde tipos referenciados (objetos). Si se aplica a una referencia null, se lanzará un NullPointerException.

				( ) (Binario)
					El operador cast puede utilizarse en variables numéricas y de referencia. Sirve para realizar una conversión de tipos.

				instanceof (Binario)
					El operador instanceof sirve para saber si la variable referenciada del lado izquierdo, pertenece al tipo nombrado del lado derecho. Por ejemplo, si se tiene Object obj = "hello"; boolean isString = (obj instanceof String); la variable isString guardará true, debido a que obj apunta a una cadena, a pesar de haberse declarado como tipo Object. Esto se verá más adelante cuando se vea polimorfismo. Este operador no es requerido para el examen.

				-> (binario)
					Operador lambda. Se utiliza para crear expresiones lambda. Se verá más adelante.

				[]	(Binario)
					Corchetes. Se utilizan para acceder al elemento de un array.

	5.1.2 Expresiones y sentencias

		Diferencia entre expresión y sentencia

			Una expresión es un conjunto de variables, operadores, constantes y/o funciones que un lenguae de programación interpreta y calcula para generar (o retornar) un nuevo valor. Toda expresión tiene un valor, ya sea primitivo o de referencia, y por lo tanto puede asignarse a una variable u operarse para crear expresiones más grandes.

			Una sentencia es una línea de código completa que puede ejecutarse y puede tener o no tener un valor. A diferencia de una expresión. no es posible combinar sentencias para crear una sentencia más grande, pero es posible escribir sentencias una tras otra para formar un programa.

			Ejemplo:
				public class TestClass{
					public static void main(String[] args){
						int a = 10;		//Es una sentencia, pero no una expresión
						int b = 20;		//También es una sentencia, tampoco es una expresión
						a + b; 			//Es una expresión, pero no una sentencia. Esta línea no compilará
						a = a + b;		//Es una expresión y también una sentencia. El valor de esta línea
										//es el resultado de la suma a + b. Toda la línea puede asignarse a
										//otra variable (p ej. k = a = a + b).
					}
				}

	5.1.3 Operadores de pos y pre incremento unario

		La diferencia entre la forma posfija y prefija de los operadores ++ y -- radica en que la forma prefija utiliza el valor antes de ser cambiado, mientras que la forma posfija primero cambia el valor y posteriormente lo utiliza. Si se tiene una expresión larga, los valores se van sustituyendo de izquierda a derecha, conforme aparecen.
		Ejemplos:
			
			a)
				int i = 1, post = 0, pre = 0;
				post = i++;
				System.out.println(i + ", " + post); 	//Imprime 1, 2
				i = 1;									//Se reinicia i
				pre = ++i;
				System.out.println(i + ", " + pre); 	//Imprime 2, 2

			b)
				int i = 1;
				i = i++;
				System.out.println(i);		//imprime 1

			c)
				int a = 2;
				int b = 5;
				int c = a * (a++ - --b) * a * b;		//Se sustituye por c = 2 * (2 - 4) * 3 * 4;
				System.out.println(a + " " + b + " " + c);	//Imprime 3 4 -48

				Te amo mucho, bebé que olvida confirmar sillones 

			d)
				int a = 2;
				int b = 5;
				int c = b * a * (a++ - --b) * a * b;		//Se sustituye por c = 5 * 2 * (2 - 4) * 3 * 4;
				System.out.println(a + " " + b + " " + c);	//Imprime 3 4 -240

		Normalmente se debe evitar utilizar ambos tipos de incremento en un mismo programa y más aún en una misma expresión, ya que puede llevar a confusiones.

		Los operadores ++ y -- pueden utilizarse en wrappers, aunque es importante señalar que, debido a que los wrappers son objetos inmutables, no se modificará el objeto en sí al que se está apuntando, sino que se devolverá un nuevo objeto con el valor modificado.
		Ejemplo:
			Integer i = 1;
			Integer j = i;	// ahora j e i apuntan al mismo objeto
			i++; // Se asignaa i un nuevo objeto que contiene 2
				// j todavía apunta al objeto original
			System.out.println(i + " " + j); //Imprime 2 1

	5.1.4 Concatenación de cadenas utilizando operadores + y +=

		El operador + está sobrecargado, ya que cambia su comportamiento según los operados. Cuando se tienen dos numéricos (ya sean primitivos o wrappers) se realiza la suma matemática. En cambio, si ambos o alguno de los dos operandos es un String, se realiza una concatenación. En caso de que sólo uno de los operandos sea un String, el otro operando será convertido a String para realizar la concatenación. Por ejemplo:

			String s1 = "hello" + " world"; //Ambos operandos son Strings
			System.out.println(s1);		//Imprime "hello world"
			String s2 = "hello " + 1;	//Primer operando String, segundo operando int
			System.out.println(s2);		//Imprime "hello 1"
			Double d = 1.0;				
			String s = "2";
			String s3 = d + s;			//Primer operando double, segundo operando String
			System.out.printl(s3);		//Imprime 1.02

		El operando que no es String puede ser de cualquier tipo, primitivo o referenciado. Cuando el operando no String es un objeto, el operando + hace que el objeto invoque el método toString, el cual convierte el objeto a una representación String del objeto. Si el operando no-String es un primitivo, el primitivo primero es empaquetado en un wrapper y posteriormente se invoca su método toString. Ejemplo:

			public class TestClass{
				public static void main(String[] args){
					TestClass tc = new TestClass();
					String str = tc.toString();
					System.out.println(str);		 Imprime "TestClass@15db9742"
					System.out.println("hello " + tc);	Imprime "hello TestClass@15db9742"
				}
			}

		Hay una curiosidad más acerca del operando de concatenación, y ésta es que si se concatena con una referencia nula, se imprime la cadena "null". Eso se debe a que el operando revisa que exista una referencia válida antes de invocar el método toString. Normalmente si se trata de utilizar una referencia nula, se lanzará la excepción NullPointerException, pero con el operando de concatenación no ocurre esto. Ejemplo:

			public class TestClass{
				public static void main(String[] args){
					TestClass tc = null;
					System.out.println("hello " + tc);		//Imprime "hello null"
				}
			}

		Por último, también es posible concatenar con el operador +=, de manera que el primer operando se concatena con el segundo y el resultado se guarda en el primer operando; por lo tanto, el primer operador debe ser un String mientras que el segundo puede ser de cualquier tipo. Ejemplo:

			String str = "2";
			str += 1;
			System.out.print(str); //Imprime 21

		Ejemplo utilizando un String nulo:

			public class TestClass{
				public static void main(String[] args){
					TestClass tc = new TestClass();
					String str = null;
					str += tc;	//Es lo mismo que str = str + tc;
					System.out.print(str);	//Imprime nullTestClass@15db9742
				}
			}

		Debido a que str es declarado como String, se llama al comportamiento de concatenación del operando +=. Una vez asignado el tipo de comportamiento al operando, realiza la concatenación. La referencia str es convertida a la cadena "null", mientras que para la variable tc se invoca el método toString().

		Es importante saber y recordar que los operadores de asignación compuesta no funcionan en declaraciones, por lo que una sentencia como String str += "test" no funcionará.

	5.1.15 Promoción numérica y casting (conversión)

		La promoción numérica se puede resumir en dos reglas

			I. Promoción numérica unaria: Si el tipo de algún operando asignado a un operador unario es de tamaño menor a int, el operando será automáticamente promovido a int antes de aplicar el operador.

			II. Promoción numérica binaria: Ambos operadores de un operador binario son promovidos a int, pero si alguno de los dos operandos es más grande que int, el otro operando es promovido al tipo del operando más grande. Por ejemplo, si ambos operandos son de tipo byte, entonces ambos son promovidos a int, pero si alguno de los operandos es long, float o double, el otro operando es promovido a long, float o double, respectivamente.

			Una implicación directa de ambas reglas es que el resultado de operar un operador a operandos numéricos es el mismo que el tipo de operando más grande, pero nunca es más pequeño que int. Ejemplo:

				public class TestClass{
					public static void main(String[] args){
						byte b = 1;
						short s = -b;	//b es convertido a int antes de aplicar el operador "-".
						System.out.println(b);
					}
				}

			El código anterior no compila debido a que b es convertido a int y no es posible guardar un int dentro de una variable short. A pesar de que -b tiene un valor de -1, el cual cabe perfectamente dentro de un short, el compilador no puede ver esto, debido a que el compilador no ejecuta código (como ya se ha visto antes) y por lo tanto no tiene idea de cuál es el valor de -b al realizar la asignación short s = -b y no puede arriesgarse a una pérdida de información no controlada por el programador.

			Ejemplo:

				short s1 = 1;
				byte b1 = 1;
				byte b2 = 2;

				short s2 = +s1;		//No compila debido a que s1 se convierte en int
				byte b = s1 + 2;	//No compila ya que el resultado es int
				b = b1 & b2;		//No compila ya que el resultado es int

				s2 = s1 << 1;		//No compila debido a que el resultado es int
				s2 = s1 * 1;		//No compila debido a que el resultado es int

				float f = 1.0f;		//Se escribe f para especificar que un valor es float
				double d = 1.0;		

				int x = f - 1;		//No compila debido a que el resultado es float (float es más
									//grande que int)
				float f3 = f + d;	//No compila debido a que el resultado es double (double es más
									//grande que float e int)

			Todas las líneas que fallan en el ejemplo son debidas a promoción numérica. Para realizar estas operaciones es necesario asegurarle al compilador que somos conscientes de lo que estamos haciendo y que estamos de acuerdo con la pérdida de información (si llega a haber alguna). Esto se realiza a travez de un casting específico. El código anterior quedaría arreglado de la siguiente manera:

				short s1 = 1;
				byte b1 = 1;
				byte b2 = 2;

				short s2 = (short) +s1);
				byte b = (byte) (81 + 2);
				b = (byte) (b1 & b2);

				s2 = (short) (s1 << 1);
				s2 = (short) (s1 * 1);

				float f = 1.0f;		//Se escribe f para especificar que un valor es float
				double d = 1.0;

				int x = (int) (f - 1);
				float f3 = (float) (f + d);

			Es importante notar que estas reglas entran en juego sólo cundo los operandos envuelven alguna variable, no cuando todos los operandos son constantes y el resultado entra dentro del rango de la variable objetivo. La necesidad de promoción no surge al tratar con constantes porque los valores se conocen en el momento de la compilación y por lo tanto, no hay posibilidad de pérdida de información en tiempo de ejecución. Sólo si el el valor producido por las constantes no entra dentro de la variable objetivo, el compilador se rehusará a compilarlo. Por lo tanto, la sentencia byte b = 200 - 100; compilará correctamente debido a que el resultado de la operación entra dentro de un byte, incluso cuando uno de los operadores sale del rango de byte. En cambio, b = 100 + 100; no compilará porque el resultado de 100 + 100 no entra dentro de un byte. Lo mismo ocurre con las constantes creadas con la palabra final, ya que son constantes en tiempo de compilación. Por lo tanto, el siguiente código compila sin errores:

				final int I = 10;
				byte b = I + 2;

			No es necesario un casting debido a que I es una constante en tiempo de compilación y el valor de I + 2 entra sin problemas dentro de un byte.

			Una excepción a las reglas de promoción numérica ocurre con los operadores de incremento unario ++ y -- y con los de asignación compuesta como +=, -= y *=. Esto ocurre debido a que estos operandos agregan un cast implícito, por lo cual el siguiente código compilará sin problemas:

				byte b1 = 1;
				byte b2 = ++b1;	//El resultado de ++b1 sigue siendo byte
				b2 = b1--; 		//El resultado de b1-- es byte
				b1 *= b2;	//Es una abreviación de b1 = (byte)(b1*b2). Por lo tanto
							//el resultado es byte
				double d = 1.0;
				float f = 2.0;
				f+=d;	//Es una abreviación de f = (float) (f + d);

			La promoción numérica también funciona en wrappers, ya que se realiza primero el unboxing del valor primitivo y posteriormente se aplica la promoción numérica. Así pues, por ejemplo, Byte bW = 1; bW = -bW; no compilará debido a que bW es desempaquetado y al aplicar el operador -, el el valor de bW es promovido a int. Al intentar volver a guardar el valor en el wrapper de tipo byte, el compilador detectará el error de tipos. Sin embargo, si se intenta realizar bW = --bW, se compilará correctamente, debido a la presencia del casting implícito.

			La diferencia con los wrappers ocurre con las variables declaradas como final. Por ejemplo:

				final Byte b1 = 10;
				Byte b2 = -b1;		//No compilará aunque b1 sea final

			El código no compila ya que la variable b1 sólo guarda la referencia al objeto y la palabra final sólo garantiza que esa variable no pueda apuntar a otro objeto, pero no garantiza que el objeto no pueda cambiar. El compilador no tiene idea de que Byte es inmutable y no puede asegurarse de que el valor desempaquetado de -b1 cabe dentro de un byte.

	5.1.16 Jerarquía de operación y evaluación de expresiones.

		Precedencia

			La precedencia de cada operador determina qué se evalua primero. Los operadores matemáticos se evalúan de la misma manera que en aritmética. Puede resumirse con el acrónimo BODMAS (brackets, orders, division, multiplication, addition, substraction). Pero en Java existen operadores de distintos tipos, no sólo aritméticos. La precedencia de operadores en Java es la siguiente:

			________________________________________________________________________
			Nombre del Operador 			Operador
			________________________________________________________________________
			Acceso a miembros y arrays		. []
			Cast 							()
			Posfijos						expr++, expr--
			Unarios							++expr, -expr, +expr, -expr, ~, !
			Multiplicativos					*, /, %
			Aditivos						+, -
			Corrimiento						<<, >>, >>>
			Relacionales					<, >, <=, >=, instanceof
			Igualdad						==, !=
			And bit a bit					&
			Xor bit a bit 					^
			Or bit a bit					|
			And lógico 						&&
			Or lógico 						||
			Ternario 						? :
			Asignación						=, +=, -=, *=, /=, %=, &=, ^=, |=, <<=,
											<<=, >>=, >>>=
			Lambda							->
			________________________________________________________________________

			Es importante notar que los operadores de acceso y casting son lo de mayor precedencia, mientras que el operador lambda tiene la menor presedencia. Esta es la razón por la que un código como el siguiente no compila:

				int = 0;
				byte b = (byte) i + 1;

			El casting se aplica únicamente sobre la variable i, debido a que tiene más precedencia que la suma. Luego, al realizar la suma, ambos operadores son transformados en int y el resultado de la operación es también int. La forma correcta de realizar la operación sería encerrar entre paréntesis también la suma (i + 1) para que se realice antes del casting.

		Asociatividad.

			La asociatividad de un operador determina la forma en que se agrupan los operadores cuando una expresión tiene múltiples operadores con la misma precedencia. Por ejemplo, el valor de la expresión 2 - 3 + 4 depende de si se agrupa como (2 - 3) + 4 o como 2 - (3 + 4). La primera forma se conoce como asociativdad izquierda (de izquierda a derecha), mientras que la segunda se conoce como asociatividad derecha (de derecha a izquierda). Casi todos los operadores en Java e agrupan en la forma en que van apareciendo, es decir, de izquierda a derecha. La única excepción son los operadores de asignación, tanto simple como compuesta. Así pues, la expresión 2 - 3 + 4 se agrupa como (2 - 3) + 4 y dará como resultado 3, pero la expresión a = b = c = 5 se agrupará como a = (b = ( c = 5)), porque el operador de asignación es asociativo por la derecha.

			Otra operación en la que la asociatividad tiene un impacto importante es la concatenación. Por ejemplo:

				String s1 = "hello";
				int i = 1;
				String s2 = s1 + 1 + i;
				System.out.println(s2);		//Imprime hello11

			Debido a que la concatenación tiene asociatividad por la derecha, se imprime hello11 y no hello2. Primero se operan los primeros dos operandos, lo que da como resultado la cadena hello1, y posteriormente se opera el resultdo con el último operando, dando como resultado hello11.

			Es importante recordar que siempre se pueden usar paréntesis para cambiar el orden en el que queramos que se realicen las operaciones.

		Orden de evaluación

			Una vez que una expresión es agrupada según sus reglas de precendencia y asociatividad, el proceso de evaluación inicia. Este paso es en el que el cálculo de cada término de la expresión se realiza. En java, las expresiones se evalúan de izquierda a derecha. Así pues, si se tiene la expresión getA() - getB() + getC(), el método getA será invocado primero, seguido de getB() y getC(). Si getA resulta en una excepción, no se evaluarán getB ni getC. Es importante recalcar que el orden de evaluación no cambia con la agrupación, por lo que incluso usando paréntesis para que la expresión sea getA() - (getB() + getC()), se seguirá invocanfo primero a getA, seguido por getB y getC, tan sólo por su orden de aparición.

5.2 Igualdad entre cadenas

	A PARTIR DE AQUÍ SÓLO SE RESALTAN COSAS REALMENTE IMPORTANTES. SE REALIZARÁN APUNTES DETALLADOS SÓLO EN CASO DE TENER EL TIEMPO SUFICIENTE

	Las cadenas son objetos de la clase java.lang.String

	Las cadenas son objetos con tratamiento diferente, debido a que se utilizan muy a menudo. Pueden crearse a partir de su constructores o también simplemente escribiendo el texto entre paréntesis.

	Las cadenas son inmutables, lo que significa que no es posible cambiar su contenido. Existen métodos que dan la ilusión de cambiar el contenido de alguna cadena, pero en realidad lo que hacen es devolver una cadena nueva y no cambian al cadena original.

	Todas las cadenas, al igual que el resto de objetos, se crean en el heap. Sin embargo, las cadenas creadas sin usar la palabra new se alojan en una región especial del heap, llamado "string pool" o "pool de cadenas".

	El próposito del pool de cadenas es mantener una colección de cadenas únicas. Cada vez que se crea una nueva cadena sin el uso de la palabra "new", java revisa si esa cadena ya existe en el pool de cadenas. Si la cadena existe, se devuelve una referencia a la misma; y si no, se crea la cadena en el pool y se devuelve la referencia.

	El string pool es una manera de ahorrar memoria, pues se evita la creación de múltiples cadenas con el mismo contenido.

	Es posible obtener una cadena del pool por medio del método intern()  on base en una cadena creada con new. A esto se le conoce como "interning" de objetos String.

	5.2.2 Comparación entre dos cadenas

		Existen dos formas de comparar dos cadenas. Utilizando el operador == y utilizando el método equals de la clase String.

		Es importante recordar que al comparar dos variables referenciadas con ==, se comparan únicamente las referencias. Si ambas variables apuntan a la misma referencia, entonces tambien las cadenas son iguales. Sin embargo, si se tienen dos objetos distintos (uno en el pool y otro fuera del pool, o ambos fuera del pool), la comparación con == será negativa, incluso cuando el contenido de ambos objetos sea el mismo. Por lo tanto, el operador == no garantiza éxito si lo que se está comparando es el contenido de las cadenas; es preferible el uso de equals.

		El método equals compara el array de caracteres contenido en cada objeto String, por lo que, sin importar que se trate de diferentes objetos, devolverá la comparación únicamente del texto de interés. Si se compara una variable String contra una literal String, es preferible invocar el método equals desde la literal que desde la variable, por ejemplo, es preferible "1234".equals(str) que str.equals("1234"). Lo anterior es debido a que si str es null, la primera forma devolverá false, mientras que la segunda arroja un NullPointerException.